<?php

/**
 * @file
 * Contains all hooks and functions for the Styled Google Map module.
 */

define('STYLED_GOOGLE_MAP_DEFAULT_WIDTH', '450px');
define('STYLED_GOOGLE_MAP_DEFAULT_HEIGHT', '300px');
define('STYLED_GOOGLE_MAP_DEFAULT_ZOOM', 15);
define('STYLED_GOOGLE_MAP_DEFAULT_MAX_ZOOM', 17);
define('STYLED_GOOGLE_MAP_DEFAULT_MIN_ZOOM', 5);
define('STYLED_GOOGLE_MAP_DEFAULT_PIN', 'module://styled_google_map/pin.png');
define('STYLED_GOOGLE_MAP_DEFAULT_MAP_TYPE', 'google.maps.MapTypeId.ROADMAP');
define('STYLED_GOOGLE_MAP_DEFAULT_LABEL', FALSE);
define('STYLED_GOOGLE_MAP_DEFAULT_MAP_TYPE_CONTROL', TRUE);
define('STYLED_GOOGLE_MAP_DEFAULT_PAN_CONTROL', TRUE);
define('STYLED_GOOGLE_MAP_DEFAULT_ZOOM_CONTROL', TRUE);
define('STYLED_GOOGLE_MAP_DEFAULT_STREET_VIEW_CONTROL', TRUE);
define('STYLED_GOOGLE_MAP_DEFAULT_SCROLLWHEEL', TRUE);

use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Implements hook_theme().
 */
function styled_google_map_theme() {
  $themes['styled_google_map'] = array(
    'variables' => array(
      'location' => NULL,
    ),
  );

  return $themes;
}


/**
 * Implements hook_page_attachments() to insert JavaScript to the appropriate scope/region of the page.
 */
function styled_google_map_page_attachments(array &$page) {
  $page['#attached']['html_head'][] = array(
    array(
      '#tag' => 'script',
      '#attributes' => array('src' => 'http://maps.google.com/maps/api/js?sensor=true'),
    ),
    'google_maps'
  );
}

/**
 * Returns HTML for the styled google map.
 *
 * @param array $variables
 *   An associative array containing:
 *   - location: The location object including longitude and latitude.
 *   - display: Display array including formatter settings.
 *
 * @ingroup themeable
 */
function theme_styled_google_map(array $variables) {
  $language = Drupal::languageManager()->getLanguage();
  $location = $variables['location']->getValue();
  $field_list = $variables['location']->getParent();
  $entity = $field_list->getEntity();
  $settings = $variables['settings'];
  $output = array();
  // TODO: Split this function so logic is out of the theming function.
  if (!empty($location) && $location['geohash']) {
    // Get the pin file url.
    if (isset($settings['style']['pin']) && !empty($settings['style']['pin'])) {
      $settings['style']['pin'] = file_create_url($settings['style']['pin']);
    }
    // Sanitize the output of the style settings.
    foreach ($settings['style'] as $id => $setting) {
      $settings['style'][$id] = \Drupal\Component\Utility\Xss::filter($setting);
    }
    // Get the label settings.
    if (isset($entity) && !empty($entity)) {
      switch ($settings['popup']['choice']) {
        // Create popup from label.
        case 1:
          $settings['popup']['label'] = $settings['popup']['label'] ? 'inline' : 'hidden';
          $popup_field = $entity->{$settings['popup']['text']}->view(array('label' => $settings['popup']['label']), $language->language);
          break;

        // Create popup from view mode.
        case 2:
          //$popup_field = field_attach_view($entity_type, $entity, $settings['popup']['view_mode'], $language->language);
          $display = EntityViewDisplay::collectRenderDisplay($entity, $settings['popup']['view_mode']);
          $popup_field = $display->build($entity);
          // Render field groups in case it is included in the attached view.
          //if (module_exists('field_group')) {
            // This is a little hack as we have to pass something to being able
            // to execute the field groups nesting function.
            //$entity_reference[] = $entity;
            //field_group_fields_nest($popup_field, $entity_reference);
          //}
          break;

        // Default to empty.
        default:
          $popup_field = array();
      }      
      $settings['popup']['text'] = render($popup_field);
    }
    else {
      // Not an entity object.
      $settings['popup']['text'] = array();
    }

    $gid = uniqid();
    // Include the Google Maps API.    
    // Include the map location settings.

    $map_settings['location'] = array('lat' => $location['lat'], 'lon' => $location['lon']);
    // Include the custom map settings.
    $map_settings['settings'] = $settings;
    // Include the unique div id.
    $map_settings['id'] = 'styled-google-map-' . $gid;
    $output['#attached']['drupalSettings']['styled_google_map'] = array($gid => $gid);
    $output['#attached']['drupalSettings']['maps'] = array('id' . $gid => $map_settings);
    
    // Output a div placeholder for the Styled Google Map.
    $output['styled_google_map']['#markup'] = '<div class="styled_map" style="width:' . \Drupal\Component\Utility\String::checkPlain($settings['width']) . ';height:' . \Drupal\Component\Utility\String::checkPlain($settings['height']) . ';" id="styled-google-map-' . $gid . '"></div>';

    // Attach the Styled Google Map javascript file.
    $output['#attached']['library'][] = 'styled_google_map/styled-google-map';
  }

  return render($output);
}

